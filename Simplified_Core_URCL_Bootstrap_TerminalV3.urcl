BITS >= 8
MINREG 4
RUN RAM
// 8 bit technically works but will be terrible, use 16 bit for smt usable
// the terminal needs 4 registers but the look up table can contain code using any number of registers

// this simplified version of the terminal aims to have a smaller LUT to reduce the bootstrap terminal size as much as possible
// to do this each instruction makes use of 2 temporary registers, meaning you do not need translations for every combination of registers in the LUT

@DEFINE tempReg1 R4
@DEFINE tempReg2 R5
// these must be set to 2 registers that you will not use in programs created by the user

.setup
// calculate lengths of the translated instructions
    IMM R1 .imm1
    IMM R2 .imm2
    NOR R2 R2 R2
    ADD R1 R1 R2
    NOR R1 R1 R1 // .imm2 - .imm1
    STR .immskiplength R1

    .printInstructionLengths
        IMM R1 .hashmap // start
        IMM R2 .instructionLookUpTable // end

        .printInstructionLengths_loop
            LOD R3 R1 // load pointer to start of instruction
            IMM R4 1
            ADD R1 R1 R4
            LOD R4 R1 // load pointer to next instruction
            NOR R4 R4 R0
            ADD R3 R3 R4
            NOR R3 R3 R0 // subtraction then print
            OUT %NUMB R3
            BGE .printInstructionLengths_loop R2 R1 // if end >= current pointer

.main
    // read user input (2 numbers)
    // first number chooses instruction
    IN R1 %NUMB

    IMM R2 .hashmap
    ADD R2 R1 R2
    LOD R1 R2 // start pointer
    IMM R3 1
    ADD R2 R2 R3
    LOD R2 R2 // end pointer

    // second number is the target memory location
    IN R3 %NUMB

    BGE .directWord R0 R1

    .mainLoop
        LOD R4 R1
        STR R3 R4
        IMM R4 1
        ADD R1 R1 R4
        ADD R3 R3 R4
        IMM R4 .jumpLocation
        LOD R4 R4
        BGE R4 R1 R2 // if start >= end
        IMM R4 .mainLoop
        BGE R4 R4 R4

    .directWord
        IN R1 %NUMB // get dw value
        STR R3 R1
        IMM R1 .jumpLocation
        LOD R1 R1
        BGE R1 R1 R1

.usefulConstants
    .jumpLocation
        DW .mainLoop
        // this exists to allow you to overwrite it and make the terminal jump to your new code
    .immskiplength
        DW 0

.hashmap
    DW 0 // .DW
    DW .ADD
    DW .RSH
    DW .NOR
    DW .LOD
    DW .STR 
    DW .BGE
    DW .IMM
    DW .IN_TEXT
    DW .OUT_TEXT // add whatever I/O ports you want here
    DW .MOVT1R1
    DW .MOVT1R2
    DW .MOVT1R3
    DW .MOVT1SP
    DW .MOVT1PC // there is a MOV instruction for every register in the main LUT
    DW .MOVT2R1
    DW .MOVT2R2
    DW .MOVT2R3
    DW .MOVT2SP
    DW .MOVT2PC
    DW .MOVR1T1
    DW .MOVR2T1
    DW .MOVR3T1
    DW .MOVSPT1
    DW .MOVPCT1

.instructionLookUpTable
    .ADD
        ADD @tempReg1 @tempReg1 @tempReg2
    .RSH
        RSH @tempReg1 @tempReg2
    .NOR
        NOR @tempReg1 @tempReg1 @tempReg2
    .LOD
        LOD @tempReg1 @tempReg2
    .STR
        STR @tempReg1 @tempReg2
    .BGE
        BGE @tempReg1 @tempReg1 @tempReg2
    .IMM
        IMM @tempReg2 2
        IMM @tempReg1 .immskiplength
        LOD @tempReg1 @tempReg1
        ADD @tempReg1 PC @tempReg1
        .imm1
        LOD @tempReg1 @tempReg1
        ADD PC PC @tempReg2
        .imm2
    .IN_TEXT
        IN @tempReg2 %TEXT
    .OUT_TEXT
        OUT %TEXT @tempReg2
    .MOVT1R1
        ADD @tempReg1 R1 R0
    .MOVT1R2
        ADD @tempReg1 R2 R0
    .MOVT1R3
        ADD @tempReg1 R3 R0
    .MOVT1SP
        ADD @tempReg1 SP R0
    .MOVT1PC
        ADD @tempReg1 PC R0
    .MOVT2R1
        ADD @tempReg2 R1 R0
    .MOVT2R2
        ADD @tempReg2 R2 R0
    .MOVT2R3
        ADD @tempReg2 R3 R0
    .MOVT2SP
        ADD @tempReg2 SP R0
    .MOVT2PC
        ADD @tempReg2 PC R0
    .MOVR1T1
        ADD R1 @tempReg1 R0
    .MOVR2T1
        ADD R2 @tempReg1 R0
    .MOVR3T1
        ADD R3 @tempReg1 R0
    .MOVSPT1
        ADD SP @tempReg1 R0
    .MOVPCT1
        ADD PC @tempReg1 R0
